[user]
	name = Paulo Fagundes
	useConfigOnly = true

[alias]
	# short aliases
	br = branch
	ci = commit
	d = diff -w
	ds = diff --staged # same as diff --cached
	f = fetch --all --prune
	st = status
	unstage = reset HEAD --

	# log
	first = rev-list --max-parents=0 HEAD # displays the very first commit from git log
	last = log -p -1 # displays the most recent commit
	lg = log --oneline --format=format:'%C(bold blue)%h%C(reset) - %C(dim white)(%ar)%C(reset) - %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
	lt = log --oneline --decorate --graph --all
	who = shortlog -s --

	# branch management
	co = "!f() { git checkout $1 && git pull --rebase; git submodule update --init --recursive; }; f"
	nb = !sh -c 'git checkout -b $1 && git push -u origin $1' - # new branch
	db = !sh -c 'git branch -D $1 && git push --delete origin $1' - # delete branch
	gone = !(git branch -vv | grep '^  .*: gone] ' 1> /dev/null) && git branch -D $(git branch -vv | grep '^  .*: gone] ' | awk '{print $1}') # deletes branches that are 'gone'
	# thx to http://stackoverflow.com/a/30998048/2261947
	find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
	show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"
	# sync your fork with upstream
	sync = !git checkout master && git pull --rebase origin master && git pull --rebase --prune upstream master && git submodule update --recursive
	ours   = !"f() { git checkout --ours $@ && git add $@; }; f"
	theirs = !"f() { git checkout --theirs $@ && git add $@; }; f"

	# does a `git pull --rebase` on all ~/git/* repositories
	u = "!f() { \
		    for D in $(find $HOME/git -maxdepth 1 -mindepth 1 -type d | sort); do \
		      cd $D; \
		      echo \"$(tput setaf 6)>>> $(git remote -v | grep origin | head -n1 | awk '{print $2}') - $(git rev-parse --abbrev-ref HEAD)$(tput sgr0)\"; \
		      git fetch --all --prune && git rebase --autostash; \
		      git submodule update --init --recursive; \
		      [ $(git log --oneline origin/master..upstream/master 2>/dev/null | wc -l) = 0 ] || echo \"$(tput setaf 1)*** origin/master..upstream/master out of sync$(tput sgr0)\"; \
		      echo; \
		   done; \
	     }; f"

	# daemon
	# http://railsware.com/blog/2013/09/19/taming-the-git-daemon-to-quickly-share-git-repository/
	serve = !git daemon --base-path=. --export-all --reuseaddr --informative-errors --verbose # share, read-only
	hub = !git daemon --base-path=. --export-all --enable=receive-pack --reuseaddr --informative-errors --verbose # share, allow push

	# submodule aliases
	sdiff = "!git diff && git submodule foreach 'git diff'"
	spush = push --recurse-submodules=on-demand
	supdate = submodule update --remote --merge
	su = submodule update --init --recursive

	# misc
	ls-ignored = ls-files --exclude-standard --ignored --others
	review = push --set-upstream gerrit HEAD:refs/for/master
	tagcleanup =  fetch --prune origin +refs/tags/*:refs/tags/* # removes local tags that are no longer on the remote repository
	visual = !gitk

[color]
	ui = auto
	diff = auto
[core]
	editor = emacsclient -nw
	autocrlf = input
[gc]
	agressiveWindow = 150
	auto = 0
[log]
	date = local
[merge]
	ff = false
	tool = meld
[pack]
	threads = 4
	windowMemory = 100m
	packSizeLimit = 100m
[pull]
	rebase = true
[push]
	default = simple
[rebase]
	autoStash = true
[status]
	submodulesummary = 1
[svn]
	pushmergeinfo = true
[credential]
	helper = libsecret # osxkeychain
[diff]
	wsErrorHighlight = all
